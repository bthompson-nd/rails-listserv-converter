#remember to create a symbolic link of this file into the NGINX configure path
#'/usr/local/openresty/nginx/conf/sites-enabled' and modify the default NGINX config
# file to include this line 'include /usr/local/openresty/nginx/conf/sites-enabled/*;'
upstream <%= app_name%>_unicorn {
	server unix:/tmp/.unicorn-<%= app_name %>.sock;
}


server{

	listen <%= http_port %>;
	server_name <%= app_name %>-<%= env_short_name %>.dc.nd.edu <%= app_name %>-<%= env_short_name %>.cc.nd.edu <%= app_name %>-<%= env_short_name %>.aws.nd.edu <%= app_name %>-<%= env_short_name %>.oit.nd.edu <%= vanity_url %>;
	error_log  /apps/<%= app_name %>/log/nginx_error.log  warn;
	access_log /apps/<%= app_name %>/log/nginx_access.log;

	root /apps/<%= app_name %>/public;
	try_files $uri/index.html $uri @<%= app_name %>_unicorn;

	client_max_body_size 5M;

	location @<%= app_name %>_unicorn{
		proxy_set_header X-Request-Start    "t=${msec}";
		proxy_set_header X-Real-IP			$remote_addr;
		proxy_set_header X-Forwarded-For	$proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded_Proto	https;

		proxy_set_header Host 				$http_host;
		proxy_redirect						off;

		proxy_read_timeout 					<%= unicorn_timeout %>;

		<% if redirect_http == "true" %>
	        # if the request has come into the http port but was not forwarded from
	        # an https request, redirect back through https.  (this allows incoming http
	        # traffic from an ELB or BigIP but not from the internet)
	        if ($http_x_forwarded_proto != "https") {
	          rewrite ^(.*)$ https://$http_host$1 permanent;
	        }
        <% end %>

		proxy_pass 							http://<%= app_name %>_unicorn;
	}

}


server{

	listen <%= ssl_port %> ssl;
	server_name <%= app_name %>-<%= env_short_name %>.dc.nd.edu <%= app_name %>-<%= env_short_name %>.cc.nd.edu <%= app_name %>-<%= env_short_name %>.aws.nd.edu <%= app_name %>-<%= env_short_name %>.oit.nd.edu <%= vanity_url %>;
    error_log  /tmp/nginx_error.log  warn;
    access_log /apps/<%= app_name %>/log/nginx_access.log;

	root /apps/<%= app_name %>/public;
	try_files $uri/index.html $uri @<%= app_name %>_unicorn;

	client_max_body_size 5M;

	location @<%= app_name %>_unicorn{
		proxy_set_header X-Request-Start    "t=${msec}";
		proxy_set_header X-Real-IP			$remote_addr;
		proxy_set_header X-Forwarded-For	$proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded_Proto	https;
		proxy_set_header Host 				$http_host;
		proxy_redirect						off;
		proxy_read_timeout 					<%= unicorn_timeout %>;
		proxy_pass 							http://<%= app_name %>_unicorn;
	}

	ssl on;

	#enables all versions of TLS, but not SSLv2 or 3 which are weak and now deprecated.
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

    #Disables all weak ciphers
    ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";

    ssl_prefer_server_ciphers on;

	ssl_certificate <%= nginx_ssl_home %>/<%= certificate_filename %>;
	ssl_certificate_key <%= nginx_ssl_home %>/<%= certificate_key %>;

}
